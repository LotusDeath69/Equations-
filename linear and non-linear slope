from scipy.optimize import fsolve
import math
from sympy import *

def formatDecimal(x):
    return ('%f' % x).rstrip('0').rstrip('.')

def slopeLinear(x1, y1, x2, y2):
    m = 0
    a = x1 - x2
    b = y1 - y2 
    if a != 0:
        m = b/a
    y_intercept = -m*x1 + y1
    if y_intercept == 0:
        print(f'y = {formatDecimal(m)}x')
    else:
        print(f'y = {formatDecimal(m)}x + {formatDecimal(y_intercept)}')

def slopeNonlinear(x1, y1, x2, y2, x3, y3):
    #Quadratic Sequences:
    # a = 1/2 second differences
    # solve for b and c via substitution
     
    first_difference_1 = y2 - y1
    first_difference_2 = y3 - y2
    second_difference = first_difference_2 - first_difference_1

    a = second_difference/2
    b = Symbol('b')
    c = Symbol('c')

    equation = a*x1**2 + b*x1 + c - y1
    equation_2 = a*x2**2 + b*x2 + c - y2
    [b, c] = nsolve([equation, equation_2], [b, c], [1, 1])
    if a == 1:
        print(f'x^2 + {formatDecimal(b)}x + {formatDecimal(c)} = y')
    else:
        print(f'{a}x^2 + {formatDecimal(b)}x + {formatDecimal(c)} = y')
